{"version":3,"sources":["action.js","api/api.js","constants.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["requestRobots","dispatch","link","type","fetch","then","response","json","data","payload","catch","error","Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchChanged","onChange","placeholder","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","this","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","searchChange","connect","searchRobots","event","target","value","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","rootReducers","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.1953c013.chunk.js","sourcesContent":["import { apiCall } from './api/api';\nimport {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n } from './constants'\n\n\nexport const setSearchField = (text) => ({ type: CHANGE_SEARCH_FIELD, payload: text })\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\n  apiCall('https://jsonplaceholder.typicode.com/users')\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const apiCall = (link) =>\n  fetch(link).then(response => response.json())","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\n\n\n\nconst Card = ({name,email,id})=>{\n    return(\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img src={`https://robohash.org/${id}?200*200`} alt=\"Robots\"/>\n            <div>\n            <h2>{name}</h2>\n            <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\n\nexport default Card","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots})=>{\n    return(\n            <div>\n            {\n            robots.map((user,i)=>{\n                return (\n                    <Card \n                      key={robots[i].id}\n                      name={robots[i].name}\n                      email={robots[i].email} \n                      id={robots[i].id} />\n                )\n               \n            })\n            }\n            </div>\n    );\n\n}\n\nexport default CardList","import React from 'react';\n\nconst SearchBox = ({searchChanged})=>{\n    return(\n        <div className=\"pa2\">\n                <input onChange={searchChanged} className=\"pa3 ba b--green bg-light-blue\" type=\"search\" placeholder=\"Search Robots\"/>\n            </div>\n    );\n}\n\nexport default SearchBox","import React from 'react';\nimport '../scroll.css';\n\nconst Scroll = (props)=>{\n    return(\n        <div style={{overflowY:'scroll',border:'1px solid black',height:'800px'}}>\n            {props.children}\n        </div>\n    )\n};\n\nexport default Scroll","import React,{Component} from 'react';\n\nclass ErrorBoundry extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            hasError:false\n        }\n    }\n\n    render(){\n        if(this.state.hasError){\n            return <h1>Opps Something wrong please,try again!!</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../action';\n\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\nimport './App.css';\n\n// parameter state comes from index.js provider store state(rootReducers)\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending\n  }\n}\n\n// dispatch the DOM changes to call an action. note mapStateToProps returns object, mapDispatchToProps returns function\n// the function returns an object then uses connect to change the data from redecers.\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { robots, searchField, onSearchChange, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return (\n      <div className='tc'>\n        <h1 className='f1'>RoboFriends</h1>\n        <SearchBox searchChange={onSearchChange}/>\n        <Scroll>\n          { isPending ? <h1>Loading</h1> :\n            <ErrorBoundry>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundry>\n          }\n        </Scroll>\n      </div>\n    );\n  }\n}\n\n// action done from mapDispatchToProps will channge state from mapStateToProps\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n   } from './constants';\n  \n  const initialStateSearch = {\n    searchField: ''\n  }\n  \n  export const searchRobots = (state=initialStateSearch, action={}) => {\n    switch (action.type) {\n      case CHANGE_SEARCH_FIELD:\n        return Object.assign({}, state, {searchField: action.payload})\n      default:\n        return state\n    }\n  }\n  \n  const initialStateRobots = {\n    robots: [],\n    isPending: true\n  }\n  \n  export const requestRobots = (state=initialStateRobots, action={}) => {\n    switch (action.type) {\n      case REQUEST_ROBOTS_PENDING:\n        return Object.assign({}, state, {isPending: true})\n      case REQUEST_ROBOTS_SUCCESS:\n        return Object.assign({}, state, {robots: action.payload, isPending: false})\n      case REQUEST_ROBOTS_FAILED:\n        return Object.assign({}, state, {error: action.payload})\n      default:\n        return state\n    }\n  }","import {Provider,connect} from 'react-redux';\nimport {createStore,applyMiddleware,combineReducers} from 'redux';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport {searchRobots,requestRobots} from './reducers'\nimport 'tachyons';\n\nconst rootReducers = combineReducers({searchRobots,requestRobots});\nconst logger = createLogger();\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger));\nReactDOM.render(\n  <React.StrictMode>\n    <App store={store}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}